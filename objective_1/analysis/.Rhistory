protocol,
experiment_id
) %>%
summarise(
mean_recovery_id = mean(mean_recovery)
)
# inter-pellets recovery by group
inter_pellet_recovery_group <- inter_pellet_recovery_ind %>%
ungroup() %>%
group_by(
protocol,
experiment_id
) %>%
summarise(
mean_recovery_group = mean(mean_recovery_id),
err = sd(mean_recovery_id) / sqrt(n())
)
# Chunk 5
weight_uncertainty <- readRDS("../data/raw/weights.rds")
write_csv(weight_uncertainty, file = "~/repos_sync/phd_objective_1/datasets/weights/objective_1_weights.csv")
lickometer_uncertainty %>%
group_by(ID) %>%
summarise(
start_date = min(fecha),
end_date = max(fecha)
)
# animals
length(unique(weight_uncertainty$animal))
# measurements
weight_uncertainty %>%
group_by(animal) %>%
summarise(
cnt = n()
)
# create control and experimental groups
weight_uncertainty <- weight_uncertainty %>%
mutate(
group = case_when(
animal %in% c(320, 323, 325, 326) ~ "experimental_high_unc",
animal %in% c(234, 235, 236, 245, 265) ~ "experimental_low_unc",
TRUE ~ "control"
)
)
# add groups
# first we get them from fed_uncerainty data
groups <- fed_uncertainty %>%
select(
animal,
protocol,
ymd
) %>%
distinct(., ymd, .keep_all = TRUE)
# add the group into weight data
weight_uncertainty <- weight_uncertainty %>%
left_join(groups, by = c("animal", "date" = "ymd")) %>%
filter(protocol %in% c("experimental", "control"))
weight_change <- weight_uncertainty %>%
group_by(
animal
) %>%
mutate(
dw = ((weight - weight[1]) / weight[1]) * 100
) %>%
do(tail(., n=3))
w_mdl <- lm(
data = weight_change,
dw ~ group
)
summary(w_mdl)
# calculate percent difference between days
weight_uncertainty <- weight_uncertainty %>%
group_by(
animal,
experiment_id
) %>%
mutate(
init_weight = weight[1],
delta_bw = ((weight - init_weight) / ((weight + init_weight) / 2)) * 100,
cumm_delta_bw = cumsum(delta_bw),
session = as.numeric(as.factor(date))
) %>%
# right number of weight sessions
filter(session <= 16)
# get means per group per session
weight_uncertainty_group <- weight_uncertainty %>%
group_by(
session,
group
) %>%
summarise(
weight_mean = mean(delta_bw),
err = sd(weight) / sqrt(n())
)
# get mean per group
weight_uncertainty_group_ <- weight_uncertainty_group %>%
group_by(
group
) %>%
summarise(
weight_mean_ = mean(weight_mean),
err_ = sd(weight_mean) / sqrt(n())
)
# get number of pellets / delta bw
# merge intake over days with weight data
intake_weight <- intake_over_days %>%
left_join(weight_uncertainty %>%
select(animal, weight, date), by = c("animal", "ymd" = "date"))
# impute missing data with a rolling average
intake_weight_imputation <- intake_weight %>%
group_by(
animal
) %>%
mutate(
rolling_weight = zoo::rollapply(weight, 5, mean, fill = 0, na.rm = TRUE)
) %>%
ungroup() %>%
filter(rolling_weight != 0) %>%
group_by(
animal,
session
) %>%
mutate(
pellets_per_gr = pellets_per_day / rolling_weight
)
# calculate means per session
intake_weight_session <- intake_weight_imputation %>%
group_by(
session,
group
) %>%
summarise(
pellets_per_gr_mean = mean(pellets_per_gr),
err = sd(pellets_per_gr) / sqrt(n())
)
# calculate means per group
intake_weight_group <- intake_weight_session %>%
group_by(
group
) %>%
summarise(
pellets_per_gr_mean_group = mean(pellets_per_gr_mean),
err = sd(pellets_per_gr_mean) / sqrt(n())
)
# same idea but with light dark periods
# get number of pellets / delta bw
# merge intake over days with weight data
intake_weight_circ <- intake_over_days_circ %>%
left_join(weight_uncertainty %>%
select(animal, weight, date), by = c("animal", "ymd" = "date"))
# impute missing data with a rolling average, add from the previously calculated
intake_weight_imputation_circ <- intake_weight_circ %>%
select(-session) %>%
left_join(intake_weight_imputation %>%
select(
animal,
ymd,
rolling_weight
), by = c("animal", "ymd")) %>%
ungroup() %>%
filter(rolling_weight != 0) %>%
group_by(
animal,
session,
light_dark
) %>%
mutate(
pellets_per_gr = pellets_per_day / rolling_weight
)
# calculate means per session
intake_weight_session_circ <- intake_weight_imputation_circ %>%
group_by(
session,
group,
light_dark
) %>%
summarise(
pellets_per_gr_mean = mean(pellets_per_gr),
err = sd(pellets_per_gr) / sqrt(n())
)
# calculate means per group
intake_weight_group_circ <- intake_weight_session_circ %>%
group_by(
group,
light_dark
) %>%
summarise(
pellets_per_gr_mean_group = mean(pellets_per_gr_mean),
err = sd(pellets_per_gr_mean) / sqrt(n())
)
labels <- weight_uncertainty %>%
select(animal, group, protocol, experiment_id) %>%
distinct(., animal, .keep_all = TRUE) %>%
rename(ID = animal)
lickometer_data <- lickometer_uncertainty %>%
left_join(
labels,
by = c("ID")
) %>%
# add session instead of dates
group_by(
group,
task_type
) %>%
mutate(
session = as.numeric(as.factor(fecha))
) %>%
ungroup()
# preference for sucrose
spout_pref <- lickometer_data %>%
group_by(
ID,
group,
protocol,
tipo_recompensa,
session,
task_type,
fecha,
experiment_id
) %>%
summarise(
n_licks = n(),
n_events = max(evento)
)
# preference for sucrose in FR
spout_pref_fr <- spout_pref %>%
filter(task_type == "fr") %>%
group_by(
group,
protocol,
tipo_recompensa,
session,
fecha
) %>%
summarise(
mean_licks = mean(n_licks)
) %>%
ungroup() %>%
group_by(
group,
protocol,
fecha
) %>%
mutate(
total_licks = sum(mean_licks),
relative_licks = (mean_licks / total_licks) * 100
) %>%
ungroup() %>%
group_by(
group,
protocol,
tipo_recompensa
) %>%
summarise(
mean_licks_group = mean(relative_licks),
err = sd(relative_licks) / sqrt(n())
)
pr_data <- lickometer_data %>%
group_by(
ID,
group,
protocol,
tipo_recompensa,
session,
task_type,
fecha,
experiment_id
) %>%
summarise(
n_licks = n(),
n_events = max(evento)
)
pr_sessions <- pr_data %>%
filter(task_type == "pr") %>%
group_by(
group,
protocol,
experiment_id
) %>%
mutate(
session = as.numeric(as.factor(fecha)),
valid_session = if_else(protocol == "control" & session > 7, 0, 1)
) %>%
# consider only sucrose licks and events
filter(valid_session == 1, tipo_recompensa == "sacarosa") %>%
select(-valid_session) %>%
# re compute standarized mean after merging both controls group together
mutate(
experiment_id = if_else(protocol == "control", "control", experiment_id)
) %>%
# z-score licks and events
group_by(
ID
) %>%
mutate(
n_licks_z = scale(n_licks),
n_events_z = scale(n_events)
) %>%
ungroup() %>%
# obtain group estimates
group_by(
protocol,
group,
experiment_id,
session
) %>%
summarise(
mean_licks = mean(n_licks),
mean_events = mean(n_events),
err_licks = sd(n_licks) / sqrt(n()),
err_events = sd(n_events) / sqrt(n())
)
pr_sessions_mdl <- pr_data %>%
filter(task_type == "pr") %>%
group_by(
group,
protocol,
experiment_id
) %>%
mutate(
session = as.numeric(as.factor(fecha)),
valid_session = if_else(protocol == "control" & session > 7, 0, 1)
) %>%
# consider only sucrose licks and events
filter(valid_session == 1, tipo_recompensa == "sacarosa") %>%
select(-valid_session) %>%
# re compute standarized mean after merging both controls group together
mutate(
experiment_id = if_else(protocol == "control", "control", experiment_id)
) %>%
# z-score licks and events
group_by(
ID
) %>%
mutate(
n_licks_z = scale(n_licks),
n_events_z = scale(n_events)
) %>%
ungroup()
licks_model <- lmer(
data = pr_sessions_mdl,
n_licks ~ group * session + (1 | ID)
)
summary(licks_model)
confint(licks_model)
pr_sessions_mdl
licks_model <- lmer(
data = pr_sessions_mdl,
n_licks ~ group * session + (1 | ID)
)
summary(licks_model)
confint(licks_model)
licks_model2 <- lme4::glmer.nb(
data = pr_sessions_mdl,
n_licks ~ group * session + (1 | ID)
)
summary(licks_model2)
pr_sessions_mdl
pr_sessions_mdl %>% view
# pool 1
pool1_pr <- pr_sessions_mdl %>%
filter(
ID %in% c(234, 235, 236, 243, 244, 245, 246, 263, 264, 265)
)
pool1_pr
licks_model3 <- lme4::glmer.nb(
data = pool1_pr,
n_licks ~ group * session + (1 | ID)
)
summary(licks_model3)
licks_model3 <- lme4::glmer.nb(
data = pool1_pr,
n_events ~ group * session + (1 | ID)
)
summary(licks_model3)
# pool 1
pool1_pr <- pr_sessions_mdl %>%
filter(
ID %in% c(234, 235, 236, 243, 244, 245, 246, 263, 264, 265)
)
licks_model3 <- lmerTest::lmer(
data = pool1_pr,
n_events ~ group * session + (1 | ID)
)
summary(licks_model3)
# pool 1
pool1_pr <- pr_sessions_mdl %>%
filter(
ID %in% c(234, 235, 236, 243, 244, 245, 246, 263, 264, 265)
)
licks_model3 <- lmerTest::lmer(
data = pool1_pr,
n_licks ~ group * session + (1 | ID)
)
summary(licks_model3)
pool1_pr %>%
ggplot(aes(session, n_licks, color = protocol)) +
geom_point()
pool1_pr %>%
ggplot(aes(session, n_licks, color = protocol)) +
stat_summary(
fun.data = "mean_se",
geom = "point",
size = 3,
color = "purple"
) +
geom_point()
pool1_pr %>%
ggplot(aes(session, n_licks, color = protocol)) +
stat_summary(
fun.data = "mean_se",
geom = "point",
size = 3,
color = "purple",
aes(group = protocol)
) +
geom_point()
pool1_pr %>%
ggplot(aes(session, n_licks, color = protocol)) +
stat_summary(
fun.data = "mean_se",
geom = "point",
size = 3,
aes(group = protocol)
) +
geom_point()
pool1_pr %>%
ggplot(aes(session, n_licks, color = protocol)) +
stat_summary(
fun.data = "mean_se",
geom = "point",
size = 3,
aes(group = protocol)
)
pr_data
lickometer_data
View(lickometer_data)
# by cost
pr_cost <- lickometer_data %>%
filter(tipo_recompensa == "sacarosa")
pr_cost
# by cost
pr_cost <- lickometer_data %>%
filter(tipo_recompensa == "sacarosa",
ID %in% c(234, 235, 236, 243, 244, 245, 246, 263, 264, 265))
pr_cost
pr_cost %>% view
# by cost
pr_cost <- lickometer_data %>%
filter(tipo_recompensa == "sacarosa",
ID %in% c(234, 235, 236, 243, 244, 245, 246, 263, 264, 265)) %>%
group_by(
ID,
group,
protocol,
tipo_recompensa,
session,
task_type,
fecha,
experiment_id,
evento
) %>%
summarise(
n_licks = n()
)
pr_cost
pr_cost %>%
ggplot(aes(evento, n_licks)) +
geom_point()
pr_cost %>%
ggplot(aes(evento, n_licks)) +
geom_point() +
facet_wrap(~protocol)
pr_cost %>%
ggplot(aes(evento, n_licks)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~protocol)
pr_cost %>%
ggplot(aes(log(evento), log(n_licks))) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~protocol)
pr_cost %>%
ggplot(aes(evento, n_licks)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~protocol)
View(pr_cost)
# by cost
pr_cost <- lickometer_data %>%
filter(tipo_recompensa == "sacarosa",
task_type == "pr",
ID %in% c(234, 235, 236, 243, 244, 245, 246, 263, 264, 265)) %>%
group_by(
ID,
group,
protocol,
tipo_recompensa,
session,
task_type,
fecha,
experiment_id,
evento
) %>%
summarise(
n_licks = n()
)
pr_cost %>%
ggplot(aes(evento, n_licks)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~protocol)
