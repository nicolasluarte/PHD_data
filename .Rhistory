df <- df_raw %>%
rename(arduino = arduinoNumber) %>%
mutate(
pc = str_extract(file_name, "data_pc_[0-9]"),
pc = stri_sub(pc,-1),
pcTime = as.numeric(pcTime),
time = hms::as_hms(strptime(pcTime, format = "%H%M%S")),
date = lubridate::ymd(date)
) %>%
select(-...2)
df %>% colnames
df <- df_raw %>%
rename(arduino = arduinoNumber) %>%
mutate(
pc = str_extract(file_name, "data_pc_[0-9]"),
pc = stri_sub(pc,-1)
) %>%
select(-...2)
# import
df_raw <- list_of_files %>%
map_df(., function(file){
r <- read_csv(file, id = "file_name") %>%
mutate_all(as.character)
})
df <- df_raw %>%
rename(arduino = arduinoNumber) %>%
mutate(
pc = str_extract(file_name, "data_pc_[0-9]"),
pc = stri_sub(pc,-1)
) %>%
select(-...2)
getwd
getwd()
write_csv(df, './objective_2/data/raw/objective_2_pool_2.csv')
data_dir <- 'objective_2/data/raw/objective_2_pool_1.csv'
data <- read_csv(data_dir)
View(data)
colnames(data)
# set column data types
data <- data %>%
mutate(
date = lubridate::ymd(date),
pcTime = as.numeric(pcTime),
msFromStart = as.numeric(msFromStart),
arduino = as.factor(arduino),
spoutNumber = case_when(
spoutNumber == "0" ~ "LEFT",
spoutNumber == "2" ~ "RIGHT",
TRUE ~ "ERROR"
),
licksCum = as.numeric(licksCum),
eventsCum = as.numeric(eventsCum),
rewardsCum = as.numeric(rewardsCum),
# TRUE in random spout means that this spout was with a prob of 0.5
randomSpout = as.logical(randomSpout),
pc = as.factor(pc)
)
# set column data types
data <- data %>%
mutate(
date = lubridate::ymd(date),
pcTime = as.numeric(pcTime),
msFromStart = as.numeric(msFromStart),
arduino = as.factor(arduino),
spoutNumber = case_when(
spoutNumber == "0" ~ "LEFT",
spoutNumber == "2" ~ "RIGHT",
TRUE ~ "ERROR"
),
licksCum = as.numeric(licksCum),
eventsCum = as.numeric(eventsCum),
rewardsCum = as.numeric(rewardsCum),
# TRUE in random spout means that this spout was with a prob of 0.5
randomSpout = as.logical(randomSpout),
pc = as.factor(pc)
) %>%
select(-file_name)
data
# set column data types
data <- data %>%
mutate(
date = lubridate::ymd(date),
pcTime = hms::as_hms(strptime(as.numeric(pcTime), format = "%H%M%S")),
msFromStart = as.numeric(msFromStart),
arduino = as.factor(arduino),
spoutNumber = case_when(
spoutNumber == "0" ~ "LEFT",
spoutNumber == "2" ~ "RIGHT",
TRUE ~ "ERROR"
),
licksCum = as.numeric(licksCum),
eventsCum = as.numeric(eventsCum),
rewardsCum = as.numeric(rewardsCum),
# TRUE in random spout means that this spout was with a prob of 0.5
randomSpout = as.logical(randomSpout),
pc = as.factor(pc)
) %>%
select(-file_name)
data <- data %>%
mutate(
date = lubridate::ymd(date),
pcTime = hms::as_hms(strptime(as.numeric(pcTime), format = "%H%M%S")),
msFromStart = as.numeric(msFromStart),
arduino = as.factor(arduino),
spoutNumber = case_when(
spoutNumber == "0" ~ "LEFT",
spoutNumber == "2" ~ "RIGHT",
TRUE ~ "ERROR"
),
licksCum = as.numeric(licksCum),
eventsCum = as.numeric(eventsCum),
rewardsCum = as.numeric(rewardsCum),
# TRUE in random spout means that this spout was with a prob of 0.5
randomSpout = as.logical(randomSpout),
pc = as.factor(pc)
)
# rename arduino column to make the join easier
df <- df %>%
rename(arduino = arduinoNumber)
# join data with metadata
df <- data %>%
left_join(
metadata,
by = c("pc", "date", "arduino")
) %>%
# only get data within session and only files without errors
filter(
time >= start,
time <= end,
complete_data == TRUE
)
# join data with metadata
df <- data %>%
left_join(
metadata,
by = c("pc", "date", "arduino")
) %>%
# only get data within session and only files without errors
filter(
pcTime >= start,
pcTime <= end,
complete_data == TRUE
)
View(df)
data
df <- data %>%
left_join(
metadata,
by = c("pc", "date", "arduino")
)
View(df)
View(metadata)
df
View(metadata)
# load metadata
metadata_dir <- './objective_2/data/meta/objective_2_metadata_pilot.csv'
metadata <- read_csv(metadata_dir) %>%
# imported all as character to avoid data compatibility issues
mutate_all(as.character)
# set columns data types
metadata <- metadata %>%
mutate(
start = hms::as_hms(start),
end = hms::as_hms(end),
date = lubridate::ymd(date),
random_spout = case_when(
random_spout == "0" ~ "LEFT",
random_spout == "2" ~ "RIGHT",
TRUE ~ "NO_RANDOM"
),
complete_data = as.logical(complete_data),
n_sesion = as.numeric(n_sesion),
ID = as.factor(ID),
lickometer_number = as.factor(lickometer_number),
com = as.factor(com),
arduino = as.factor(arduino),
pc = as.factor(pc),
across(init_licks_0:end_events_2, ~as.numeric(.x))
)
View(metadata)
# load metadata
metadata_dir <- './objective_2/data/meta/objective_2_metadata_pilot.csv'
metadata <- read_csv(metadata_dir) %>%
# imported all as character to avoid data compatibility issues
mutate_all(as.character)
View(metadata)
# set columns data types
metadata <- metadata %>%
mutate(
start = hms::as_hms(start),
end = hms::as_hms(end),
date = lubridate::ymd(date),
random_spout = case_when(
random_spout == "0" ~ "LEFT",
random_spout == "2" ~ "RIGHT",
TRUE ~ "NO_RANDOM"
),
complete_data = as.logical(as.numeric(complete_data)),
n_sesion = as.numeric(n_sesion),
ID = as.factor(ID),
lickometer_number = as.factor(lickometer_number),
com = as.factor(com),
arduino = as.factor(arduino),
pc = as.factor(pc),
across(init_licks_0:end_events_2, ~as.numeric(.x))
)
# load data
data_dir <- 'objective_2/data/raw/objective_2_pool_1.csv'
data <- read_csv(data_dir)
# set column data types
data <- data %>%
mutate(
date = lubridate::ymd(date),
pcTime = hms::as_hms(strptime(as.numeric(pcTime), format = "%H%M%S")),
msFromStart = as.numeric(msFromStart),
arduino = as.factor(arduino),
spoutNumber = case_when(
spoutNumber == "0" ~ "LEFT",
spoutNumber == "2" ~ "RIGHT",
TRUE ~ "ERROR"
),
licksCum = as.numeric(licksCum),
eventsCum = as.numeric(eventsCum),
rewardsCum = as.numeric(rewardsCum),
# TRUE in random spout means that this spout was with a prob of 0.5
randomSpout = as.logical(randomSpout),
pc = as.factor(pc)
) %>%
select(-file_name)
# join data with metadata
df <- data %>%
left_join(
metadata,
by = c("pc", "date", "arduino")
) %>%
# only get data within session and only files without errors
filter(
pcTime >= start,
pcTime <= end,
complete_data == TRUE
)
View(df)
# add experimental groups and phases
df <- df %>%
mutate(
exp_phase = if_else(n_sesion <= 12, "BASAL", "EXPERIMENTAL"),
exp_group = case_when(
ID %in% c(217, 219, 223, 224) ~ "UNC",
TRUE ~ "CONTROL"
)
)
# add column to identify if the current spout was random or not
df <- df %>%
mutate(
spout_type = if_else(random_spout == TRUE, "UNC", "CER")
)
# rename position of random spout and random spout bool
df <- df %>%
rename(
is_random = randomSpout,
random_spout_pos = random_spout
)
# add column to detect if current event was rewarded or not
df <- df %>%
group_by(
ID,
n_sesion,
spoutNumber
) %>%
mutate(
is_reward = if_else(eventsCum - lag(eventsCum) == 1 & rewardsCum - lag(rewardsCum) == 1)
)
# add column to detect if current event was rewarded or not
df <- df %>%
group_by(
ID,
n_sesion,
spoutNumber
) %>%
mutate(
is_reward = if_else(eventsCum - lag(eventsCum) == 1 & rewardsCum - lag(rewardsCum) == 1, "REWARDED", "NOT_REWARDED")
)
# add column to detect if current event was rewarded or not
df <- df %>%
group_by(
ID,
n_sesion,
spoutNumber
) %>%
mutate(
is_reward = if_else(eventsCum - lag(eventsCum) == 1 & rewardsCum - lag(rewardsCum) == 1, "REWARDED", "NOT_REWARDED")
) %>%
ungroup()
# correct baseline licks and events
df <- df %>%
group_by(
ID,
n_sesion,
spoutNumber
) %>%
mutate(
licks_corr = licksCum - licksCum[1],
events_corr = eventsCum - eventsCum[1],
rewards_corr = rewardsCum - rewardsCum[1]
)
df
# set a time variable with ms
df <- df %>%
mutate(
time = as.numeric(pcTime)
)
# set a time variable with ms
df <- df %>%
mutate(
time = paste(date, pcTime, sep = "_")
)
# set a time variable with ms
df <- df %>%
mutate(
time = paste(date, pcTime, sep = " ")
)
# set a time variable with ms
df <- df %>%
mutate(
time = lubridate::ymd_hms(paste(date, pcTime, sep = " "))
)
# set a time variable with ms
df <- df %>%
mutate(
time = as.numeric(lubridate::ymd_hms(paste(date, pcTime, sep = " ")))
)
# set a time variable with ms
df <- df %>%
mutate(
time = as.numeric(lubridate::ymd_hms(paste(date, pcTime, sep = " "), tz = "GMT-4"))
)
# set a time variable with ms
df <- df %>%
mutate(
time = as.numeric(lubridate::ymd_hms(paste(date, pcTime, sep = " "), tz = "UTC"))
)
OlsonNames()
# set a time variable with ms
df <- df %>%
mutate(
time = as.numeric(lubridate::ymd_hms(paste(date, pcTime, sep = " "), tz = "Chile/Continental"))
)
library(ggplot2)
df <-
ggplot(aes(n_sesion, msFromStart))+geom_line()
df %>%
ggplot(aes(n_sesion, msFromStart))+geom_line()
df %>%
ggplot(aes(n_sesion, date))+geom_line()
df %>%
ggplot(aes(date, msFromStart))+geom_line()
df %>%
ggplot(aes(date, msFromStart))+geom_line()+facet_wrap(~arduino)
df %>%
ggplot(aes(date, msFromStart))+geom_line()
# msFromStart for each ID
df <- df %>%
group_by(ID, n_sesion) %>%
mutate(
msFromStart_corr = msFromStart - msFromStart[1]
)
# msFromStart for each ID
df <- df %>%
group_by(ID, n_sesion) %>%
mutate(
msFromStart_corr = msFromStart - msFromStart[1]
) %>%
ungroup()
# msFromStart for each ID
df <- df %>%
group_by(ID, n_sesion) %>%
mutate(
msFromStart_corr = msFromStart - msFromStart[1]
) %>%
ungroup()
# set a time variable with ms
df <- df %>%
mutate(
time = as.numeric(lubridate::ymd_hms(paste(date, pcTime, sep = " "), tz = "Chile/Continental")) * 1000 + msFromStart_corr
)
# disable scientific notation
options(scipen = 999)
# set a time variable with ms
df <- df %>%
mutate(
time = as.numeric(lubridate::ymd_hms(paste(date, pcTime, sep = " "), tz = "Chile/Continental")) * 1000 + msFromStart_corr
)
getwd()
# save final data
write_rds(df, "./objective_2/data/objective_2_pool_1.RDS")
# load all libs
pacman::p_load(
tidyverse,
stringi,
here
)
# disable scientific notation
options(scipen = 999)
# this assumes that the repo is on the home folder
setwd('~/PHD_data')
# load metadata
metadata_dir <- './objective_2/data/meta/objective_2_metadata_pilot.csv'
metadata <- read_csv(metadata_dir) %>%
# imported all as character to avoid data compatibility issues
mutate_all(as.character)
# set columns data types
metadata <- metadata %>%
mutate(
start = hms::as_hms(start),
end = hms::as_hms(end),
date = lubridate::ymd(date),
random_spout = case_when(
random_spout == "0" ~ "LEFT",
random_spout == "2" ~ "RIGHT",
TRUE ~ "NO_RANDOM"
),
complete_data = as.logical(as.numeric(complete_data)),
n_sesion = as.numeric(n_sesion),
ID = as.factor(ID),
lickometer_number = as.factor(lickometer_number),
com = as.factor(com),
arduino = as.factor(arduino),
pc = as.factor(pc),
across(init_licks_0:end_events_2, ~as.numeric(.x))
)
# load data
data_dir <- 'objective_2/data/raw/objective_2_pool_1.csv'
data <- read_csv(data_dir)
# set column data types
data <- data %>%
mutate(
date = lubridate::ymd(date),
pcTime = hms::as_hms(strptime(as.numeric(pcTime), format = "%H%M%S")),
msFromStart = as.numeric(msFromStart),
arduino = as.factor(arduino),
spoutNumber = case_when(
spoutNumber == "0" ~ "LEFT",
spoutNumber == "2" ~ "RIGHT",
TRUE ~ "ERROR"
),
licksCum = as.numeric(licksCum),
eventsCum = as.numeric(eventsCum),
rewardsCum = as.numeric(rewardsCum),
# TRUE in random spout means that this spout was with a prob of 0.5
randomSpout = as.logical(randomSpout),
pc = as.factor(pc)
) %>%
select(-file_name)
# join data with metadata
df <- data %>%
left_join(
metadata,
by = c("pc", "date", "arduino")
) %>%
# only get data within session and only files without errors
filter(
pcTime >= start,
pcTime <= end,
complete_data == TRUE
)
# add experimental groups and phases
df <- df %>%
mutate(
exp_phase = if_else(n_sesion <= 12, "BASAL", "EXPERIMENTAL"),
exp_group = case_when(
ID %in% c(217, 219, 223, 224) ~ "UNC",
TRUE ~ "CONTROL"
)
)
# rename position of random spout and random spout bool
df <- df %>%
rename(
is_random = randomSpout,
random_spout_pos = random_spout
)
# add column to detect if current event was rewarded or not
df <- df %>%
group_by(
ID,
n_sesion,
spoutNumber
) %>%
mutate(
is_reward = if_else(eventsCum - lag(eventsCum) == 1 & rewardsCum - lag(rewardsCum) == 1, "REWARDED", "NOT_REWARDED")
) %>%
ungroup()
# correct baseline licks and events
df <- df %>%
group_by(
ID,
n_sesion,
spoutNumber
) %>%
mutate(
licks_corr = licksCum - licksCum[1],
events_corr = eventsCum - eventsCum[1],
rewards_corr = rewardsCum - rewardsCum[1]
)
# msFromStart for each ID
df <- df %>%
group_by(ID, n_sesion) %>%
mutate(
msFromStart_corr = msFromStart - msFromStart[1]
) %>%
ungroup()
# save final data
write_rds(df, "./objective_2/data/objective_2_pool_1.RDS")
